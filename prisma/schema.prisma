// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Branch {
  id          Int       @id @default(autoincrement())
  branchCode  String    @unique
  branchName  String
  address     String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  del         Int       @default(0)
  users       User[]
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  email         String        @unique
  passwordHash  String
  branch        Branch?       @relation(fields: [branchId], references: [id])
  branchId      Int?
  roles         UserRole[]
  refreshTokens RefreshToken[]
  loginLogs     LoginLog[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  del           Int           @default(0)
}

model Role {
  id          Int         @id @default(autoincrement())
  roleName    String      @unique
  description String?
  canView     Boolean     @default(false)
  canAdd      Boolean     @default(false)
  canEdit     Boolean     @default(false)
  canDelete   Boolean     @default(false)
  users       UserRole[]
  del         Int         @default(0)
}

model UserRole {
  id     Int   @id @default(autoincrement())
  user   User  @relation(fields: [userId], references: [id])
  userId Int
  role   Role  @relation(fields: [roleId], references: [id])
  roleId Int
  del    Int   @default(0)

  @@unique([userId, roleId])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  revokedAt  DateTime?
  del        Int      @default(0)
}

model LoginLog {
  id        Int       @id @default(autoincrement())
  user      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  loginTime DateTime  @default(now())
  ipAddress String?
  success   Boolean
  del       Int       @default(0)
}